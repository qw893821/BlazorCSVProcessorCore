@page "/csvprocessor"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using BlazorCSVProcessorCore.Pages.Helpers

<div>
    <!--display the list side by side-->
    <div class="container">

        @{
            if (FileList.Count != 0)
            {
                <div>
                    <input type="checkbox" id="editChk" title="Add Header" @onchange="eventargs => { ChangeStatus(eventargs.Value, ref isHiddenHeader); }" />
                    <div id="mycontent">
                        <button id="addInputBtn" click="AddInputBox">Add Input Box</button>
                    </div>
                </div>
                <div hidden="@isHiddenHeader" id="headerholder" @ref="HeaderHolder">
                    @{
                        for (int i = 0; i < NewCols.Count; i++)
                        {
                            //add a buffer val, other wise, the i value will always be Count at last iteration
                            var val = i;
                            <div>
                                <input type="text" placeholder="column" @bind="NewCols[val]" @bind:event="onchange" />
                            </div>
                        }

                    }
                    <button @onclick="AppendCol">Add Header</button>
                    <button @onclick="CancelAppend">Cancel</button>
                    <button @onclick="ConfirmAppend">Confirm</button>
                </div>
            }
        }

        <div>@exceptionMessage</div>
        @{
            if (isLoading)
            {
                <p>Loading...</p>
            }
        }
        <input type="checkbox" title="Edit" @onchange="eventargs => { ChangeStatus(eventargs.Value, ref IsEditable); }">
        <div class="row">
            <table class="table ">
                <thead class="table-dark">
                    <tr>
                        @{
                            foreach (var header in NewCols)
                            {
                                <td>@header</td>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < FileList.Count; i++)
                    {
                        //local index buffer;
                        var val = i;
                        <tr>
                            @{

                                var cols = FileList[i].Split(',');
                                foreach (var col in cols)
                                {
                                    <td class="border col">
                                        <p>@col</p>
                                    </td>
                                }
                                <td class="col">
                                    <input @bind="FileList[val]" disabled="@IsEditable" />
                                    <button hidden="@IsEditable" @onclick="@(()=>RemoveRow(val))">Delete Row</button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <form>
            <label>
                Upload File
                <InputFile OnChange="@LoadFile">
                    some text
                </InputFile>
            </label>
            <button type="submit">Upload Selected File(s)</button>
        </form>
    </div>

</div>
@code {
    //loading file
    private bool isLoading;
    //hide editable content
    private bool isHiddenHeader = true;
    //disable/enable input
    private bool IsEditable = true;


    private List<string> FileList = new List<string>();
    private IBrowserFile browserFile;
    string exceptionMessage;
    ElementReference HeaderHolder;

    private string headerLine = string.Empty;
    private List<string> NewCols = new List<string>();
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        try
        {

            await CSVProcessHelper.ReaderHelper(e.File.OpenReadStream(), FileList);

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }
        isLoading = false;

    }

    void ChangeStatus(object eventObj, ref bool isTrue)
    {
        try
        {
            if ((bool)eventObj)
            {
                isTrue = false;
            }
            else isTrue = true;
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }
    }



    void AppendCol(MouseEventArgs e)
    {
        if (NewCols != null)
        {

            NewCols.Add(string.Empty);
        }

    }

    void CancelAppend(MouseEventArgs e)
    {
        NewCols.Clear();
    }

    void ConfirmAppend()
    {

    }

    void RemoveRow(int index)
    {
        try
        {
            FileList.RemoveAt(index);
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }
    }
}
